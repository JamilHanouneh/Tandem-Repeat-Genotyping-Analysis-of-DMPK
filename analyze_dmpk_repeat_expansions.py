"""
================================================================================
DMPK CONSENSUS SIZE ANALYSIS FROM QC GENOTYPE TABLE
================================================================================

PURPOSE:
This script extracts and analyzes DMPK (Dystrophia Myotonica-Protein Kinase) 
gene CTG repeat consensus sizes from a pre-processed quality control (QC) 
genotype table generated by tandem repeat analysis pipelines (e.g., TRGT). 
The script performs clinical classification of allele sizes to identify samples 
with expanded repeats associated with Myotonic Dystrophy Type 1 (DM1).

CLINICAL CONTEXT:
Myotonic Dystrophy Type 1 (DM1) is an autosomal dominant neuromuscular disorder
caused by CTG trinucleotide repeat expansions in the DMPK gene (chromosome 19q13).
The disease exhibits anticipation with increasing severity across generations.

REPEAT SIZE CLASSIFICATION (ACMG/NCBI Guidelines):
- Normal alleles: 5-34 CTG repeats (healthy individuals)
- Variable/premutation alleles: 35-49 repeats (at-risk, usually asymptomatic)
- Pathogenic alleles: ≥50 repeats (disease-causing expansion)
  * Minimal DM1: 50-150 repeats (mild symptoms, late onset)
  * Classical DM1: 100-1000 repeats (typical adult-onset presentation)
  * Congenital DM1: >1000 repeats (severe neonatal form)

WORKFLOW OVERVIEW:
1. QC TABLE LOADING
   - Reads pre-generated CSV file containing tandem repeat QC metrics
   - CSV contains quality-controlled genotype data for multiple samples
   - First column contains sample identifiers, rows contain metrics

2. DATA TRANSPOSITION
   - Transposes matrix to convert samples from columns to rows
   - Transforms QC metrics from rows to column headers
   - Resets index to create standard tabular structure

3. DMPK METRIC IDENTIFICATION
   - Searches for 'DMPK consensus size allele 0' column (first allele)
   - Searches for 'DMPK consensus size allele 1' column (second allele)
   - Diploid samples typically have two alleles (one per chromosome)

4. PER-SAMPLE EXTRACTION
   - Iterates through each sample row in transposed dataframe
   - Extracts consensus size values for both alleles
   - Filters out missing values (NaN entries)
   - Converts values to integers for numerical analysis

5. CLINICAL CLASSIFICATION
   - Applies pathogenic threshold (>50 repeats) to each allele
   - Classifies alleles as 'Normal' or 'Expanded'
   - Expanded alleles indicate potential Myotonic Dystrophy risk
   - Sorts samples by consensus size (descending) for severity ranking

6. SEVERITY RANKING AND VISUALIZATION
   - Generates bar plot showing repeat lengths per sample/allele
   - Color-codes bars by clinical status:
     * Skyblue: Normal alleles (≤50 repeats)
     * Salmon: Expanded alleles (>50 repeats, pathogenic)
   - Marks pathogenic threshold with red dashed line at 50 repeats
   - Annotates bars with exact repeat counts
   - Exports Chart.js configuration object for web visualization

7. HIGH-RISK SAMPLE REPORTING
   - Filters dataset to isolate pathogenic samples (>50 repeats)
   - Prints summary table of potentially affected individuals
   - Provides actionable list for clinical follow-up

CONSENSUS SIZE DEFINITION:
"Consensus size" refers to the modal or most frequently observed repeat length 
determined by the genotyping algorithm after quality control filtering. This 
value represents the best estimate of true allele length from sequencing reads.

DATA SOURCE REQUIREMENTS:
- Input: QC-Target_Genotype_Table.csv from TRGT pipeline
- Expected columns: 'DMPK consensus size allele 0', 'DMPK consensus size allele 1'
- Data source: Coriell reference samples (PacBio HiFi sequencing)

CLINICAL INTERPRETATION:
- Individuals with both alleles ≤34 repeats: No DM1 risk
- Individuals with one allele 35-49 repeats: Premutation carrier (monitor offspring)
- Individuals with one/both alleles ≥50 repeats: DM1 diagnosis likely
- Larger expansions (>200 repeats): Higher disease severity expected

ERROR HANDLING:
- Checks for DMPK column existence before extraction
- Skips missing values (NaN) during data collection
- Terminates with error message if no DMPK data extracted
- Validates DataFrame before plotting

OUTPUTS:
- Console output: Extracted DMPK data, clinical classifications, high-risk samples
- Bar plot: Repeat lengths per sample with clinical color-coding
- Chart.js JSON: Interactive web visualization configuration object

QUALITY CONTROL NOTES:
- Input CSV should be pre-filtered by upstream QC pipeline (TRTools)
- Low-quality genotype calls should be removed before this analysis
- Assumes Hardy-Weinberg equilibrium violations already addressed
- Assumes samples with >5% genotype missingness already excluded

LIMITATIONS:
- Does not detect somatic mosaicism (tissue-specific variations)
- Does not identify motif interruptions (CCG, GGC variants)
- Uses single consensus value per allele (no length distribution)
- Simplified ≥50 threshold may miss borderline cases (35-49 repeats)

DEPENDENCIES:
pandas, matplotlib
================================================================================
"""

import pandas as pd  # Module import - Enable tabular data manipulation
import matplotlib.pyplot as plt  # Module import - Create visualizations


# ========== PIPELINE STAGE 1: QC Table Loading ==========

qc_file = r"C:\Users\jamel\Desktop\PhD Position in Translational Neurogenetics at TUM School of Medicine and Health & MGZ, Munich – September 10, 2025\1 - Tandem Repeat Genotyping Pipeline Analysis of DMPK Expansions\Dataset\QC-Target_Genotype_Table.csv"  # Path assignment - Define QC table file location
qc_df = pd.read_csv(qc_file, index_col=0)  # CSV parsing - Load genotype table with first column as index

print("Raw CSV head:")  # Console output - Print section header
print(qc_df.head())  # DataFrame display - Show initial table structure


# ========== PIPELINE STAGE 2: Data Transposition ==========

qc_df = qc_df.T.reset_index()  # Matrix transposition & index reset - Convert metrics to columns and samples to rows
qc_df = qc_df.rename(columns={'index': 'Sample'})  # Column renaming - Label sample identifier column

print("\nTransposed DataFrame head:")  # Console output - Print section header
print(qc_df.head())  # DataFrame display - Show transposed structure


# ========== PIPELINE STAGE 3: DMPK Metric Identification ==========
# ========== PIPELINE STAGE 4: Per-Sample Extraction ==========

dmpk_data = []  # List initialization - Create container for DMPK records

for sample in qc_df['Sample']:  # Column iteration - Process each sample individually
    sample_row = qc_df[qc_df['Sample'] == sample]  # Boolean filtering - Extract single sample row
    
    if 'DMPK consensus size allele 0' in qc_df.columns:  # Column existence check - Verify allele 0 data availability
        value = sample_row['DMPK consensus size allele 0'].iloc[0]  # Cell access - Extract allele 0 consensus size
        if pd.notna(value):  # Missing value check - Skip NaN entries
            dmpk_data.append({'Sample': sample, 'Allele': 'Allele 0', 'Consensus Size': int(value)})  # Dictionary append & type casting - Store allele 0 record as integer
    
    if 'DMPK consensus size allele 1' in qc_df.columns:  # Column existence check - Verify allele 1 data availability
        value = sample_row['DMPK consensus size allele 1'].iloc[0]  # Cell access - Extract allele 1 consensus size
        if pd.notna(value):  # Missing value check - Skip NaN entries
            dmpk_data.append({'Sample': sample, 'Allele': 'Allele 1', 'Consensus Size': int(value)})  # Dictionary append & type casting - Store allele 1 record as integer

dmpk_df = pd.DataFrame(dmpk_data)  # DataFrame construction - Convert list of dictionaries to tabular format

print("\nDMPK DataFrame:")  # Console output - Print section header
print(dmpk_df)  # DataFrame display - Show extracted DMPK data

if dmpk_df.empty:  # DataFrame validation - Check for successful data extraction
    print("Error: No DMPK data extracted. Check CSV content for 'DMPK consensus size' rows.")  # Error message - Alert user to extraction failure
    exit()  # Program termination - Stop execution on error


# ========== PIPELINE STAGE 5: Clinical Classification ==========

dmpk_df['Status'] = dmpk_df['Consensus Size'].apply(  # Column creation with lambda - Add clinical classification
    lambda x: 'Expanded (Potential Myotonic Dystrophy Risk)' if x > 50 else 'Normal'  # Threshold comparison - Classify pathogenic vs normal
)

print("\nDMPK Repeat Lengths Across Samples:")  # Console output - Print section header
print(dmpk_df[['Sample', 'Allele', 'Consensus Size', 'Status']].sort_values('Consensus Size', ascending=False))  # DataFrame subsetting & sorting - Display ranked clinical data


# ========== PIPELINE STAGE 6: Severity Ranking and Visualization ==========

plt.figure(figsize=(10, 6))  # Figure initialization - Set plot dimensions
bars = plt.bar(dmpk_df['Sample'] + '_' + dmpk_df['Allele'], dmpk_df['Consensus Size'],  # Bar plot with string concatenation - Visualize repeat lengths per allele
               color=dmpk_df['Status'].map({'Normal': 'skyblue', 'Expanded (Potential Myotonic Dystrophy Risk)': 'salmon'}))  # Categorical color mapping - Color-code by clinical status
plt.axhline(y=50, color='red', linestyle='--', label='Pathogenic Threshold (>50 repeats)')  # Horizontal reference line - Mark clinical significance cutoff
plt.xlabel('Sample and Allele')  # Axis labeling - Describe x-axis
plt.ylabel('DMPK Repeat Length (bp)')  # Axis labeling - Describe y-axis
plt.title('DMPK Repeat Expansions in Coriell Samples (Mimicking Variant Discovery)')  # Plot titling - Describe visualization
plt.legend()  # Legend display - Show threshold annotation
plt.xticks(rotation=45, ha='right')  # Axis formatting - Rotate labels for readability
plt.tight_layout()  # Layout optimization - Prevent label cutoff

for bar in bars:  # Bar iteration - Process each bar for annotation
    yval = bar.get_height()  # Attribute access - Get bar height value
    plt.text(bar.get_x() + bar.get_width()/2, yval + 20, int(yval), ha='center', va='bottom')  # Text annotation - Label bar with numeric value

chartjs = {  # Dictionary creation - Define Chart.js configuration object
    "type": "bar",  # Chart type specification - Set bar chart format
    "data": {  # Data section - Define dataset structure
        "labels": (dmpk_df['Sample'] + '_' + dmpk_df['Allele']).tolist(),  # Series concatenation & list conversion - Create x-axis labels
        "datasets": [{  # Dataset array - Define single dataset object
            "label": "DMPK Repeat Length (bp)",  # Dataset label - Name data series
            "data": dmpk_df['Consensus Size'].tolist(),  # Series to list conversion - Extract y-axis values
            "backgroundColor": dmpk_df['Status'].map({  # Categorical color mapping - Set bar fill colors
                'Normal': 'rgba(135, 206, 235, 0.7)',  # RGBA specification - Define skyblue with transparency
                'Expanded (Potential Myotonic Dystrophy Risk)': 'rgba(250, 128, 114, 0.7)'  # RGBA specification - Define salmon with transparency
            }).tolist(),  # Series to list conversion - Convert mapped colors to list
            "borderColor": dmpk_df['Status'].map({  # Categorical color mapping - Set bar border colors
                'Normal': 'rgba(135, 206, 235, 1)',  # RGBA specification - Define skyblue with full opacity
                'Expanded (Potential Myotonic Dystrophy Risk)': 'rgba(250, 128, 114, 1)'  # RGBA specification - Define salmon with full opacity
            }).tolist(),  # Series to list conversion - Convert mapped colors to list
            "borderWidth": 1  # Border width specification - Set bar outline thickness
        }]
    },
    "options": {  # Options section - Configure chart behavior
        "scales": {  # Axes configuration - Define axis properties
            "y": {  # Y-axis settings - Configure vertical axis
                "beginAtZero": True,  # Axis range setting - Start y-axis at zero
                "title": {  # Axis title configuration - Define y-axis label
                    "display": True,  # Title visibility - Show axis label
                    "text": "DMPK Repeat Length (bp)"  # Title text - Set axis label content
                }
            },
            "x": {  # X-axis settings - Configure horizontal axis
                "title": {  # Axis title configuration - Define x-axis label
                    "display": True,  # Title visibility - Show axis label
                    "text": "Sample and Allele"  # Title text - Set axis label content
                }
            }
        },
        "plugins": {  # Plugin configuration - Define chart enhancements
            "legend": {  # Legend settings - Configure legend display
                "display": False  # Legend visibility - Hide legend
            },
            "title": {  # Title configuration - Define chart title
                "display": True,  # Title visibility - Show chart title
                "text": "DMPK Repeat Expansions in Coriell Samples"  # Title text - Set chart title content
            },
            "annotation": {  # Annotation plugin - Add reference lines
                "annotations": {  # Annotations object - Define annotation items
                    "line1": {  # Line annotation - Define threshold line
                        "type": "line",  # Annotation type - Specify line annotation
                        "yMin": 50,  # Line position - Set minimum y-coordinate
                        "yMax": 50,  # Line position - Set maximum y-coordinate
                        "borderColor": "red",  # Line color - Set red border
                        "borderWidth": 2,  # Line thickness - Set border width
                        "borderDash": [5, 5],  # Dash pattern - Create dashed line
                        "label": {  # Label configuration - Define line annotation label
                            "content": "Pathogenic Threshold (>50 repeats)",  # Label text - Describe threshold
                            "enabled": True,  # Label visibility - Show label
                            "position": "end"  # Label position - Place at line end
                        }
                    }
                }
            }
        }
    }
}

plt.show()  # Plot rendering - Display matplotlib figure

pathogenic = dmpk_df[dmpk_df['Status'] == 'Expanded (Potential Myotonic Dystrophy Risk)']  # Boolean filtering - Extract pathogenic samples
print("\nSamples with Potentially Pathogenic DMPK Expansions (>50 repeats):")  # Console output - Print section header
print(pathogenic[['Sample', 'Allele', 'Consensus Size']])  # DataFrame subsetting & display - Show high-risk samples
